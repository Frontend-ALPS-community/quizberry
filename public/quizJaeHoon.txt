js

1. **질문: 자바스크립트의 'null'과 'undefined'의 차이점은 무엇입니까?**

   **답변:** 
   - null은 개체 값이 의도적으로 없는 경우를 나타냅니다. 개발자가 명시적으로 지정합니다.
   - 'undefined'는 일반적으로 값이 의도하지 않게 없는 경우를 나타냅니다. 이 값은 선언되었지만 초기화되지 않은 변수 또는 존재하지 않는 개체 속성에 자동으로 할당됩니다.

2. **질문: 자바스크립트로 클로저의 개념을 설명합니다.**

   **답변:**
   - 클로저는 외부 기능 실행이 완료된 후에도 외부 범위에서 변수에 액세스할 수 있는 기능입니다.
   - 작성된 환경을 "기억"하여 해당 환경에서 변수와 매개 변수에 액세스할 수 있습니다.

3. **질문: 자바스크립트의 '=='과 '==='의 차이점은 무엇입니까?**

   **답변:**
   - ==는 형식 강제를 수행하는 느슨한 평등 연산자로 피연산자를 동일한 형식으로 비교하기 전에 변환을 시도한다는 의미입니다. 예를 들어 1 == 1은 true를 반환합니다.
   - ===는 형식적 강제를 하지 않는 엄격한 평등 사업자입니다. 가치와 유형을 모두 확인하기 때문에 1 === 1은 false을 돌려줍니다.

4. **질문: 자바스크립트에서 이벤트 위임이란?**

   **답변:**
   - 이벤트 위임은 여러 이벤트 수신자를 개별 자식 요소에 연결하는 것이 아니라 단일 이벤트 수신자를 부모 요소에 연결하는 기술입니다.
   - 이벤트가 발생하면 대상 요소에서 부모 요소로 DOM 트리를 버블업하여 부모에 연결된 이벤트 리스너를 트리거합니다.
   - 이 접근 방식은 동적으로 생성되거나 많은 수의 요소에서 이벤트를 효율적으로 처리하는 데 특히 유용합니다.

타입스크립트


1. **질문: TypeScript란 무엇이며, JavaScript와 어떤 차이가 있습니까?**

   **답변:**
   - TypeScript는 언어에 정적 타이핑 및 기타 기능을 추가하는 자바스크립트의 상위 집합입니다.
   - 주요 차이점은 TypeScript가 정적 유형을 도입하여 개발자가 변수, 함수 매개 변수, 반환 유형 등에 대한 유형을 정의할 수 있다는 것입니다. 이는 런타임이 아닌 컴파일 시간에 오류를 잡아내 더 안전하고 유지 관리 가능한 코드로 이어집니다.

2. **질문: TypeScript에서 인터페이스란 무엇이며, 어떻게 사용됩니까?**

   **답변:**
   - TypeScript의 인터페이스는 개체의 구조를 정의하는 데 사용됩니다. 이 인터페이스는 개체의 속성 이름과 유형을 지정하여 개체의 모양을 설명합니다.
   - 인터페이스는 종종 클래스 또는 객체에 대한 계약을 시행하는 데 사용되어 특정 속성과 방법을 갖도록 합니다.
   - 컴파일 시간 유형 검사를 수행하고 코드 문서화 및 가독성을 지원하는 방법을 제공합니다.

3. **질문: TypeScript의 제네릭은 무엇이며, 왜 유용합니까?**

   **답변:**
   - TypeScript의 제네릭을 사용하면 다양한 데이터 유형과 함께 작동하는 재사용 가능한 구성 요소 또는 기능을 만들 수 있습니다.
   - 유형 안전을 잃지 않고 다양한 데이터 유형에서 작동할 수 있는 유형 또는 기능을 정의할 수 있습니다.
   - 제네릭은 다양한 유형의 데이터로 작업해야 하는 데이터 구조(예: 배열, 목록 또는 지도) 및 유틸리티 함수를 작성할 때 특히 유용합니다.

4. **질문: TypeScript는 자바스크립트 개발자가 TypeScript로 전환하는 것을 어떻게 지원합니까?**

   **답변:**
   - TypeScript는 자바스크립트의 상위 집합으로 설계되었으며, 이는 기존의 자바스크립트 코드도 유효한 TypeScript 코드임을 의미합니다.
   - TypeScript를 사용하면 개발자는 자바스크립트 코드베이스에 점진적으로 유형 주석을 추가하여 정적 타이핑을 점진적으로 채택할 수 있습니다.
   - TypeScript는 널리 사용되는 자바스크립트 라이브러리와 프레임워크에 대한 유형 정의를 제공하는 DefiniteTyped와 같은 도구를 제공하므로 TypeScript 프로젝트에서 기존 자바스크립트 코드로 더 쉽게 작업할 수 있습니다.

NextJS


1. **질문: Next.js는 무엇이며 주요 기능은 무엇입니까?**

   **답변:**
   - Next.js는 서버 측 렌더링(SSR) 및 정적 생성(SSG) 웹 애플리케이션을 구축하기 위한 React 프레임워크입니다.
   - 주요 기능은 다음과 같습니다:
     - 향상된 성능과 SEO를 위한 서버측 렌더링(SSR) 및 정적 사이트 생성(SSG).
     - 더 빠른 페이지 로드를 위한 자동 코드 분할입니다.
     - 동적 경로를 지원하는 내장형 클라이언트 측 라우팅입니다.
     - 동일한 응용프로그램 내에 서버리스 API 엔드포인트를 구축하기 위한 API 경로입니다.
     - CSS 모듈, CSS-in-JS 라이브러리 및 Sass/SCSS에 대한 내장 지원.

2. **질문: Next.js.**에서 서버측 렌더링(SSR)과 정적 사이트 생성(SSG)의 차이점을 설명합니다

   **답변:**
   - 서버 측 렌더링(SSR)은 각 요청에 대해 HTML을 생성하여 서버가 완전히 렌더링된 페이지를 클라이언트로 보낼 수 있도록 합니다.
   - 정적 사이트 생성(SSG)은 빌드 시 HTML을 생성하여 CDN에서 직접 서비스할 수 있는 정적 파일로 페이지를 미리 렌더링합니다.
   - SSR은 동적인 콘텐츠나 잦은 업데이트가 필요한 페이지에 유용한 반면 SSG는 자주 변경되지 않고 빌드 시간에 미리 렌더링할 수 있는 콘텐츠에 이상적입니다.

3. ** 질문: Next.js에서 데이터 가져오기를 어떻게 처리합니까?**

   **답변:**
   - Next.js는 다음과 같은 데이터 가져오기를 위한 여러 가지 방법을 제공합니다:
     - getStaticProps': 빌드 시 데이터를 가져오고 페이지를 정적 HTML로 미리 렌더링합니다.
     - getServerSideProps': 각 요청에 대한 데이터를 가져오고 서버의 페이지를 미리 렌더링합니다.
     - 'getStaticPaths': 빌드 시 미리 렌더링해야 할 경로를 지정하기 위해 동적 경로와 함께 사용됩니다.
     - useSWR' 및 'SWRConfig': 데이터의 재검증 및 캐싱을 위해 SWR 라이브러리를 사용하여 클라이언트 측 데이터를 가져오는 것.

4. ** 질문: Next.js는 클라이언트 측 라우팅을 어떻게 처리합니까?**

   **답변:**
   - next.js는 각 페이지 구성 요소가 경로에 해당하는 파일 기반 라우팅 시스템을 사용합니다.
   - 클라이언트 측 라우팅은 Next.js의 'Link' 구성 요소를 사용하여 이루어지며, 이 구성 요소는 더 빠른 탐색을 위해 백그라운드에서 링크된 페이지를 미리 가져옵니다.
   - 동적 경로는 파일 기반 라우팅을 사용하여 지원되며 URL에서 동적 세그먼트를 나타내기 위해 대괄호('[...]')를 사용합니다.


CS


1. **질문: 시간의 복잡성에 대한 개념과 프론트엔드 개발에서의 중요성을 설명합니다.**

   **답변:**
   - 시간 복잡도는 알고리즘이 입력 길이의 함수로 실행되는 데 걸리는 시간을 측정합니다.
   - 프론트엔드 개발에서 효율적인 알고리즘은 특히 대규모 데이터 세트나 복잡한 작업을 처리할 때 성능 최적화에 매우 중요합니다.
   - 시간 복잡성을 이해하면 프론트 엔드 개발자가 애플리케이션 및 웹 사이트에서 최적의 성능을 보장하기 위해 가장 적절한 알고리즘과 데이터 구조를 선택하는 데 도움이 됩니다.

2. **질문: DOM(Document Object Model) 조작이 웹 애플리케이션의 성능에 어떤 영향을 미칩니까?**

   **답변:**
   - DOM 조작은 자바스크립트를 이용하여 HTML 문서의 요소에 접근, 수정 또는 삭제하는 과정을 말합니다.
   - 과도한 DOM 조작은 각각의 조작 트리거가 계산 비용이 많이 드는 작업인 리플로우 및 리페인을 발생시키기 때문에 성능에 부정적인 영향을 미칠 수 있습니다.
   - 프론트엔드 개발자는 배치 업데이트, 요소에 대한 참조 캐싱, DOM 상호 작용을 최적화하는 최신 라이브러리 또는 프레임워크 활용과 같은 기술을 사용하여 DOM 조작을 최소화하는 것을 목표로 해야 합니다.

3. **질문: 자바스크립트의 동기 프로그래밍과 비동기 프로그래밍의 차이점을 설명하고, 각 접근 방식이 적합한 시기를 설명합니다.**

   **답변:**
   - 동기 프로그래밍은 작업을 순차적으로 실행하여 현재 작업이 완료될 때까지 추가 실행을 차단합니다.
   - 비동기 프로그래밍을 사용하면 메인 프로그램 흐름과 독립적으로 작업을 실행할 수 있어 차단 없이 실행할 수 있고 응답성이 향상됩니다.
   - 프론트엔드 개발에서 비동기 프로그래밍은 UI 차단을 방지하고 원활한 사용자 경험을 보장하기 위해 서버에서 데이터 가져오기, 사용자 상호 작용 처리 및 애니메이션 수행과 같은 작업에 일반적으로 사용됩니다.

4. **질문: 클라이언트 측 캐싱은 웹 애플리케이션에서 성능 최적화에 어떻게 기여합니까?**

   **답변:**
   - 클라이언트 측 캐싱은 반복적인 네트워크 요청의 필요성을 줄이기 위해 사용자 장치에 리소스(예: 이미지, 스크립트 및 스타일시트)를 로컬로 저장하는 것을 포함합니다.
   - 프론트엔드 개발자는 정적 자산을 캐싱함으로써 로딩 시간을 개선하고 대역폭 사용량을 줄여 페이지 로드 속도를 높이고 전체 성능을 향상시킬 수 있습니다.
   - 웹 애플리케이션에서 클라이언트 측 캐싱을 최적화하기 위해 일반적으로 HTTP 캐싱 헤더 사용, 브라우저 캐싱 메커니즘 활용, 오프라인 캐싱을 위한 서비스 워커 구현 등의 기술이 사용됩니다.

